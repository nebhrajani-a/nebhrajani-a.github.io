#+include: ../../preamble.org

#+HTML: <h1 id="title">Why Emacs?</h1>
#+HTML: <div class="post-meta"> <2021-04-30 Fri> - 9 min read
#+HTML: </div>

For anybody who spends a large part of their day talking to a
computer, the dynamics of this interaction become incredibly
important: everything from posture to software tools. This isn't
something specific to programmers. In many cultures, swordsmen were
taught that mastery is achieved when the sword feels like an extension
of the body. Or, if you're looking for something more modern, see
Harry Potter's search for the 'just right' wand when he first visited
Diagon Alley.

The perfect marriage between a tool and its wielder involves only two
things:

- The skill of the wielder, and
- The qualities of the tool.

In general, the former takes an incredible amount of effort, so most
people who are learning an art seriously focus far more on it. This
leaves the latter to be discussed only by either the posers who assume
that buying the same golf club Tiger Woods uses gives them the same
level of skill, or the designers of the tool themselves. All is well
and good with the world.

For the moment, consider the case of a blacksmith making a perfect
hammer for himself. In this case, the blacksmith is both the wielder
and the designer of the tool, meaning that he can design this tool to
be /precisely/ right for him. Unlike the general designer of a hammer,
he doesn't have to worry about whether the tool is good for ten
thousand people, and unlike the general wielder, he can build the tool
to work around his own inadequacies in skill.

A programmer using a program to accomplish a task is in /precisely/
the same position as this blacksmith. He has the skills to forge his
own tool, to make something perfectly suited to himself. Why doesn't
this happen then?

Well, duplicated effort, low quality, and low return on investment.
If everybody wrote their own web browser, the end result would be a
bunch of really bad programs and a huge time loss for all parties
involved. Everybody compromises a little bit to have a few stable,
large projects with features everyone wants, and possibly, a few
plugins for people to change the behaviour slightly, to taste.
Of course, these plugins don't provide a feature \(X\) as well as
the program having it natively, but oh well, such is life. Everybody
needs to compromise a little, and anyway, people have better things
to do than fight with an ugly plugin API.

However, I posit that what these large programs get right is that a
central base with sensible defaults and simple features is useful ---
however, their method of providing customisation to the user (a plugin
interface or something of the sort) isn't an instance of good design
in the special case where your user (wielder) base is mostly
programmers.

In this article, we explore what goes into making a really good text
editor, and why that editor is Emacs.


* Text Editors in History
  A program that is able to open a file from disk, change a few
  characters, and write it back to disk, is a text editor. This is a
  deceptively simple description --- indeed, UNIX's =ed=, a line
  editor, fulfills all these criteria. Programmers use text editors to
  edit files called programs, that are written in human-readable
  languages. Sometimes, programmers have to write in English as well.
  This is when text editors with extra features become more useful ---
  things like:

  - Visual mode: Instead of being able to only edit a line (or other
    unit) at a time, the whole file can be viewed in a sort of
    'buffer' and moved around in.
  - Better movement: Moving around faster over walls of text.
  - Syntax and spell checking: Tells the programmer where errors are
    and makes them easy to correct.
  - Syntax highlighting: certain keywords are highlighted in different
    colors to make reading easier.
  - Multiple files open at the same time.
  - Support for a bunch of different languages, scripts, and locales.
  - $\cdots$

  Sometimes, even features like debuggers and version control systems
  are integrated into text editors, creating what is called an
  Integrated Development Environment (IDE).[fn:1]

  I'm sure you'll now see the parallel with web browsers. Different
  people want different things from text editors, and instead of
  writing their own editors, people compromise a little and use a text
  editor with sensible defaults. However, the big difference between
  the two cases is the user base --- rather than the casual computer
  user, the user base for programming-y text editors are programmers.
  There must be a better way to reconcile the stability of a large,
  popular project with the level of customisation and access
  programmers can utilize to make the tool better, rather than an ugly
  plugin system.

** Notable Text Editors

   The following are some of the text editors we'll discuss in this
   post. If I missed your favourite text editor, forgive me, this page
   has limited space. Text editors that can be run in the terminal are
   written with their command names (like =vi=).

   1. =ed=: UNIX's original line text editor, also a part of the POSIX
      standard. Nobody really uses it as a full time editor anymore.
   2. =vi=: A screen editor, modal in nature. Default on all
      POSIX-compliant systems, so it's worth learning.
   3. =vim=: A port of =vi= with many extensions. Extremely widely
      used. Many *nix systems actually run vim when the user calls
      =vi=. Have a major war with =emacs= users.
   4. =nano=: A simple, Notepad-like editor for the terminal.
   5. =emacs=: The other big UNIX editor, focused on extensibility.
      GNU Emacs is the most widely used fork. Have a major war with
      =vi= / =vim= users.
   6. Notepad and its clones: Simple GUI-only text editors. Can't do
      much with these.
   7. Sublime Text: An editor that was very popular a few years ago.
      Python-based plugin API for customisation.
   8. Atom: An editor developed by GitHub, designed to be 'hackable'.
      Extension and package creation language: JavaScript, since it
      ran on top of a web browser (Electron framework).
   9. Visual Studio Code: Currently the most popular editor in the
      world. Runs on top of a web browser (Electron), and uses
      JavaScript for extension.

   Now, instead of discussing these one by one, we'll pick up certain
   common design principles between these editors and reason about
   which ones are desirable.

** Platforms

Generally, editors are written as a single big program (often in C),
that has all editor features and functions, and is compiled and
distributed. =vi=, =nano=, =vim=, and a few others follow this simple
model.

An alternative to this model is what many modern text editors (and in
fact many other applications do), is implement a browser core and
rendering engine, then write an application on top of it using
JavaScript or some other web technology. This has the tremendous
advantage of having a powerful scripting language that can be used to
change application properties on the fly. It also means that the same
application can be run as a web application hosted on some website. VS
Code and Atom use this model.

The final alternative is to implement a core that’s actually an
interpreter for a scripting language which is used to program an
editor. This is similar to the web browser model in that the
application properties can be changed on the fly, but different in
that the core doesn’t have to be as heavy and complicated as web
browsers. The core can be lightweight, run without a GUI, and most
importantly, doesn’t have to be in JavaScript and limited by what the
web standard may or may not allow. This is =emacs=’ model.

An ideal editor uses the core and extension language model, because
this maximises extensibility without the explicit need for a plugin
interface or (God forbid) recompilation.

** Interfaces
Editors can be TUI-only (=nano=), GUI-only (Atom, VS Code), or both.
TUI-only editors tend to not have fancy icons and support for certain
fonts and symbols, while GUI-only editors are useless on a system that
only provides a terminal interface.

A good editor provides both without any loss of feature in either,
beyond actual limitations enforced by a terminal. =emacs= does this.
=vim= has a GUI, but it’s a different program called =gvim=. Most
modern editors only have GUI support.

** Keyboard or Mouse-Driven

    This is an interesting topic. Some editor interfaces are very
    clicky. This means that to get something done, you often have to
    click an icon or drag something from here to there. Naturally,
    since mice are a GUI luxury, most TUI supporting editors have only
    optional use of the mouse when running as a GUI.

    However, this design choice is a little more complex. As any
    seasoned computer user knows, keyboards are the fastest and most
    precise way to interact with a computer. Hollywood understands
    this too: the master hacker is always typing, since that is the
    fastest way to talk to a computer when the world is going to be
    blown up in three minutes. Even if you aren't in a Bond film,
    there is more comfort associated with not having to reach for the
    mouse and squint at tiny icons while editing. Moreover, keyboards
    are more precise: consider mouse-based vs. keyboard-based
    selection. Mice aren't a very useful tool for text editing, but
    are indispensable in applications like photo editing.

    Good editors, however, don't force this choices on users,
    especially towards the mouse side, since that slows experienced
    users down at the cost of newbie-friendliness. There should at
    least be a way to do a mouse action using a keyboard.

** Complexity
This is one of the /really/ big debates, which draws its roots from
the modular *NIX vs. monolithic Windows philosophy. In short,
proponents of simple editors claim that an editor is just another tool
among many others. An editor need not have regular expression
abilities: there’s =grep= for that. An editor need not have a
graphical debugger: what’s =gdb= for? This side uses the operating
system as the development environment, and oppose the unholy mixing of
these functions into a gigantic text editing program. [UNIX AS IDE]

The other side of the debate claims that having all these tools within
one environment makes the development process faster, since there is
very little context switching involved. Moreover, having a single
powerful tool allows interesting interfaces between functions that
would otherwise have been discrete and impossible to link together via
a text stream.

Today, it seems the monolithic side has /de facto/ won, since even
editors like =vi= / =vim=, which pride themselves on simplicity:

#+begin_quote
A student enquired of Master Wq, “When will I know I have mastered Vimscript?”

Master Wq answered, “When you never use it.”
#+end_quote

have extensions for file browsing and auto-completion. It’s just too
convenient not to have.

** Modal vs. Non-Modal

   Mos people today are entirely unfamiliar with modal editing as a
   concept, since nearly no text editing programs have a modal
   interface. A modal interface simply means that the editor has a
   'normal' mode where pressing the key =a= (for instance) does not
   insert the letter 'a', but instead performs some editor function.
   To actually insert the letter, the editor must be put into 'insert'
   mode, which is when pressing keys is a literal insert into the
   file.

   Modal interfaces may sound complicated, but, in truth, it's exactly
   the same concept as a modifier key. When you hold down =Ctrl=, the
   keyboard keys all behave differently. In this state, pressing 'f'
   may execute the search function. Modal editing can simply be
   thought of as putting the editor into a mode where a modifier key
   is always pressed, or into a mode where you can just insert text. If
   this sounds needlessly complicated, hang in there, we'll get to
   discussing why it can actually be useful eventually.

   For now, it is sufficient to note that the most popular modal
   editor is =vi=, whose modal keybindings are so popular that nearly
   every other editor has a way to use them, often as a plugin. The
   quality of these plugins varies, and most are missing features
   vital to the seasoned =vi= user.

** Extensibility

   And now, to the elephant in the room. How much should a user be
   able to change? How much should a user actually change?

   In my opinion, a user of a text editor should never be bound by the
   imagination of the program's author. This means that a user should
   be able to use the editor to do things the author didn't even know
   were possible, without editing the actual program binary. This is
   especially important for text editors because people come up with
   new features all the time, most of which are useful. This level of
   extensibility requires an extension language.

*** Extension Language
    The definition of an extension language for a text editor isn't
    well defined. In practice, they range from configuration files which
    switch certain options on and off to Turing complete dialects of
    Lisp, with most falling in between.

*** Packages
*** How Much Extension is Too Much?

* Footnotes

[fn:1] In this post, we focus our attention on text editors rather
than IDEs, although the distinction between the two is often blurred.
I make this choice because Emacs itself is a text editor, and the
IDE-like bits are all custom elisp.
